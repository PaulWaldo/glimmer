// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	flickr "gopkg.in/masci/flickr.v3"

	mock "github.com/stretchr/testify/mock"
)

// Authorizer is an autogenerated mock type for the Authorizer type
type Authorizer struct {
	mock.Mock
}

type Authorizer_Expecter struct {
	mock *mock.Mock
}

func (_m *Authorizer) EXPECT() *Authorizer_Expecter {
	return &Authorizer_Expecter{mock: &_m.Mock}
}

// GetAuthorizeUrl provides a mock function with given fields: client, reqToken
func (_m *Authorizer) GetAuthorizeUrl(client *flickr.FlickrClient, reqToken *flickr.RequestToken) (string, error) {
	ret := _m.Called(client, reqToken)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizeUrl")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*flickr.FlickrClient, *flickr.RequestToken) (string, error)); ok {
		return rf(client, reqToken)
	}
	if rf, ok := ret.Get(0).(func(*flickr.FlickrClient, *flickr.RequestToken) string); ok {
		r0 = rf(client, reqToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*flickr.FlickrClient, *flickr.RequestToken) error); ok {
		r1 = rf(client, reqToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorizer_GetAuthorizeUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizeUrl'
type Authorizer_GetAuthorizeUrl_Call struct {
	*mock.Call
}

// GetAuthorizeUrl is a helper method to define mock.On call
//   - client *flickr.FlickrClient
//   - reqToken *flickr.RequestToken
func (_e *Authorizer_Expecter) GetAuthorizeUrl(client interface{}, reqToken interface{}) *Authorizer_GetAuthorizeUrl_Call {
	return &Authorizer_GetAuthorizeUrl_Call{Call: _e.mock.On("GetAuthorizeUrl", client, reqToken)}
}

func (_c *Authorizer_GetAuthorizeUrl_Call) Run(run func(client *flickr.FlickrClient, reqToken *flickr.RequestToken)) *Authorizer_GetAuthorizeUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flickr.FlickrClient), args[1].(*flickr.RequestToken))
	})
	return _c
}

func (_c *Authorizer_GetAuthorizeUrl_Call) Return(_a0 string, _a1 error) *Authorizer_GetAuthorizeUrl_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Authorizer_GetAuthorizeUrl_Call) RunAndReturn(run func(*flickr.FlickrClient, *flickr.RequestToken) (string, error)) *Authorizer_GetAuthorizeUrl_Call {
	_c.Call.Return(run)
	return _c
}

// GetRequestToken provides a mock function with given fields: client
func (_m *Authorizer) GetRequestToken(client *flickr.FlickrClient) (*flickr.RequestToken, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestToken")
	}

	var r0 *flickr.RequestToken
	var r1 error
	if rf, ok := ret.Get(0).(func(*flickr.FlickrClient) (*flickr.RequestToken, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*flickr.FlickrClient) *flickr.RequestToken); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flickr.RequestToken)
		}
	}

	if rf, ok := ret.Get(1).(func(*flickr.FlickrClient) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorizer_GetRequestToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRequestToken'
type Authorizer_GetRequestToken_Call struct {
	*mock.Call
}

// GetRequestToken is a helper method to define mock.On call
//   - client *flickr.FlickrClient
func (_e *Authorizer_Expecter) GetRequestToken(client interface{}) *Authorizer_GetRequestToken_Call {
	return &Authorizer_GetRequestToken_Call{Call: _e.mock.On("GetRequestToken", client)}
}

func (_c *Authorizer_GetRequestToken_Call) Run(run func(client *flickr.FlickrClient)) *Authorizer_GetRequestToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*flickr.FlickrClient))
	})
	return _c
}

func (_c *Authorizer_GetRequestToken_Call) Return(_a0 *flickr.RequestToken, _a1 error) *Authorizer_GetRequestToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Authorizer_GetRequestToken_Call) RunAndReturn(run func(*flickr.FlickrClient) (*flickr.RequestToken, error)) *Authorizer_GetRequestToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthorizer creates a new instance of Authorizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authorizer {
	mock := &Authorizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
